#!/usr/bin/env node

var path = require('path');
var child_process = require('child_process');


function getArgs(args, cover, check, unit) {
    var argIndex = 0;
    var argList = [[], [], []];

    args.filter(function(arg, i) {
        return i !== cover && i !== check && i !== unit;
    }).slice(2).forEach(function(arg) {
        if (arg === '--') {
            argIndex += 1;
        } else {
            argList[argIndex].push(arg);
        }
    });

    return argList;
}

var cover = process.argv.indexOf('cover');
var check = process.argv.indexOf('check-coverage');
var unit = process.argv.indexOf('unit');
var args = getArgs(process.argv, cover, check, unit);
var execArgs, execPath;

if (cover !== -1) {
    execPath = require.resolve('babel-cli/bin/babel-node');
    execArgs = [].concat(
        args[0],
        [require.resolve('babel-istanbul/lib/cli'), 'cover'],
        args[1],
        [require.resolve('mocha/bin/_mocha'), '--'],
        args[2]
    );
} else if (check !== -1) {
    execPath = require.resolve('babel-istanbul/lib/cli');
    execArgs = process.argv.slice(2);
} else if (unit !== -1) {
    execPath = require.resolve('babel-cli/bin/babel-node');
    execArgs = [].concat(
        [require.resolve('mocha/bin/_mocha')],
        args[0]
    );
}

if (execPath && execArgs) {
    proc = child_process.spawn(execPath, execArgs, {stdio: 'inherit'});
    proc.on('exit', function (code, signal) {
        process.on('exit', function() {
            if (signal) {
                process.kill(process.pid, signal);
            } else {
                process.exit(code);
            }
        });
    });
    process.on('SIGINT', function () {
        proc.kill('SIGINT');
        proc.kill('SIGTERM');
    });
}
